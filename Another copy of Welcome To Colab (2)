{"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"alR58AGPATNl","executionInfo":{"status":"ok","timestamp":1747723634974,"user_tz":-180,"elapsed":27560,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"3c5071df-1433-4a2f-d168-2be187120481"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import scipy.stats as stats\n","sns.set()"],"metadata":{"id":"NU53LpKmBJ9v","executionInfo":{"status":"ok","timestamp":1747723636279,"user_tz":-180,"elapsed":1311,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["df=pd.read_csv(r\"/content/drive/MyDrive/prob/GHCND_sample_csv.csv\")"],"metadata":{"id":"omK3puSzcQZN","executionInfo":{"status":"ok","timestamp":1747723637113,"user_tz":-180,"elapsed":832,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"KkcYJTxQchr-","executionInfo":{"status":"ok","timestamp":1747723637136,"user_tz":-180,"elapsed":21,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"e06ed365-d771-4770-d199-b9f283d95500"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              STATION          STATION_NAME  ELEVATION  LATITUDE  LONGITUDE  \\\n","0   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","1   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","2   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","3   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","4   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","5   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","6   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","7   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","8   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","9   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","10  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","11  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","12  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","13  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","14  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","15  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","16  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","17  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","18  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","19  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","20  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","21  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","22  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","23  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","24  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","25  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","26  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","27  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","28  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","29  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","30  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","\n","        DATE  TMAX  TMIN  PRCP  \n","0   20100101  -178  -311     0  \n","1   20100102  -244  -322     0  \n","2   20100103  -194  -289     0  \n","3   20100104  -167  -200    15  \n","4   20100105  -133  -167  9999  \n","5   20100106  -133  -172  9999  \n","6   20100107  -150  -278     0  \n","7   20100108  -233  -328     0  \n","8   20100109  -233  -322     0  \n","9   20100110  -117  -244     0  \n","10  20100111   -67  -128     0  \n","11  20100112   -78  -122     0  \n","12  20100113   -17   -89     0  \n","13  20100114    39   -72     0  \n","14  20100115   -67   -72     0  \n","15  20100116    22   -50     0  \n","16  20100117    33   -44     0  \n","17  20100118     6  -172     0  \n","18  20100119   -56  -183     0  \n","19  20100120   -67  -139     0  \n","20  20100121   -67   -94    25  \n","21  20100122   -44   -67     0  \n","22  20100123    -6   -44     0  \n","23  20100124     0   -11     0  \n","24  20100125   -11  -161     0  \n","25  20100126  -161  -233     0  \n","26  20100127  -167  -222     0  \n","27  20100128  -167  -283     0  \n","28  20100129  -189  -283     0  \n","29  20100130  -156  -267     0  \n","30  20100131  -150  -272     0  "],"text/html":["\n","  <div id=\"df-473e8159-91f5-440a-bf81-3ee6859b4538\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATION</th>\n","      <th>STATION_NAME</th>\n","      <th>ELEVATION</th>\n","      <th>LATITUDE</th>\n","      <th>LONGITUDE</th>\n","      <th>DATE</th>\n","      <th>TMAX</th>\n","      <th>TMIN</th>\n","      <th>PRCP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100101</td>\n","      <td>-178</td>\n","      <td>-311</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100102</td>\n","      <td>-244</td>\n","      <td>-322</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100103</td>\n","      <td>-194</td>\n","      <td>-289</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100104</td>\n","      <td>-167</td>\n","      <td>-200</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100105</td>\n","      <td>-133</td>\n","      <td>-167</td>\n","      <td>9999</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100106</td>\n","      <td>-133</td>\n","      <td>-172</td>\n","      <td>9999</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100107</td>\n","      <td>-150</td>\n","      <td>-278</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100108</td>\n","      <td>-233</td>\n","      <td>-328</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100109</td>\n","      <td>-233</td>\n","      <td>-322</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100110</td>\n","      <td>-117</td>\n","      <td>-244</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100111</td>\n","      <td>-67</td>\n","      <td>-128</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100112</td>\n","      <td>-78</td>\n","      <td>-122</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100113</td>\n","      <td>-17</td>\n","      <td>-89</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100114</td>\n","      <td>39</td>\n","      <td>-72</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100115</td>\n","      <td>-67</td>\n","      <td>-72</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100116</td>\n","      <td>22</td>\n","      <td>-50</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100117</td>\n","      <td>33</td>\n","      <td>-44</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100118</td>\n","      <td>6</td>\n","      <td>-172</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100119</td>\n","      <td>-56</td>\n","      <td>-183</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100120</td>\n","      <td>-67</td>\n","      <td>-139</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100121</td>\n","      <td>-67</td>\n","      <td>-94</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100122</td>\n","      <td>-44</td>\n","      <td>-67</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100123</td>\n","      <td>-6</td>\n","      <td>-44</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100124</td>\n","      <td>0</td>\n","      <td>-11</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100125</td>\n","      <td>-11</td>\n","      <td>-161</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100126</td>\n","      <td>-161</td>\n","      <td>-233</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100127</td>\n","      <td>-167</td>\n","      <td>-222</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100128</td>\n","      <td>-167</td>\n","      <td>-283</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100129</td>\n","      <td>-189</td>\n","      <td>-283</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100130</td>\n","      <td>-156</td>\n","      <td>-267</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100131</td>\n","      <td>-150</td>\n","      <td>-272</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-473e8159-91f5-440a-bf81-3ee6859b4538')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-473e8159-91f5-440a-bf81-3ee6859b4538 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-473e8159-91f5-440a-bf81-3ee6859b4538');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-79895a6e-cf58-4065-848e-d74633315c94\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-79895a6e-cf58-4065-848e-d74633315c94')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-79895a6e-cf58-4065-848e-d74633315c94 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_a6d234ad-b7e2-4172-8de9-fa112a257a0a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a6d234ad-b7e2-4172-8de9-fa112a257a0a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 31,\n  \"fields\": [\n    {\n      \"column\": \"STATION\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"GHCND:USC00327027\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATION_NAME\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"PETERSBURG 2 N ND US\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ELEVATION\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8891521579485214e-13,\n        \"min\": 466.3,\n        \"max\": 466.3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          466.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LATITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1668641184613914e-14,\n        \"min\": 48.0355,\n        \"max\": 48.0355,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          48.0355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LONGITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.222880394871303e-14,\n        \"min\": -98.01,\n        \"max\": -98.01,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -98.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DATE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 20100101,\n        \"max\": 20100131,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          20100128\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TMAX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84,\n        \"min\": -244,\n        \"max\": 39,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          -56\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TMIN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 98,\n        \"min\": -328,\n        \"max\": -11,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          -244\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PRCP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2496,\n        \"min\": 0,\n        \"max\": 9999,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"eRhbpJGkciT2","executionInfo":{"status":"ok","timestamp":1747723637167,"user_tz":-180,"elapsed":18,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"f26c525c-7666-47de-9c55-a556bb91f714"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             STATION          STATION_NAME  ELEVATION  LATITUDE  LONGITUDE  \\\n","0  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","1  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","2  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","3  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","4  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","\n","       DATE  TMAX  TMIN  PRCP  \n","0  20100101  -178  -311     0  \n","1  20100102  -244  -322     0  \n","2  20100103  -194  -289     0  \n","3  20100104  -167  -200    15  \n","4  20100105  -133  -167  9999  "],"text/html":["\n","  <div id=\"df-1e8ee87e-fa87-4acc-a36a-8aa763fe5cc9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATION</th>\n","      <th>STATION_NAME</th>\n","      <th>ELEVATION</th>\n","      <th>LATITUDE</th>\n","      <th>LONGITUDE</th>\n","      <th>DATE</th>\n","      <th>TMAX</th>\n","      <th>TMIN</th>\n","      <th>PRCP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100101</td>\n","      <td>-178</td>\n","      <td>-311</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100102</td>\n","      <td>-244</td>\n","      <td>-322</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100103</td>\n","      <td>-194</td>\n","      <td>-289</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100104</td>\n","      <td>-167</td>\n","      <td>-200</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100105</td>\n","      <td>-133</td>\n","      <td>-167</td>\n","      <td>9999</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e8ee87e-fa87-4acc-a36a-8aa763fe5cc9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1e8ee87e-fa87-4acc-a36a-8aa763fe5cc9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1e8ee87e-fa87-4acc-a36a-8aa763fe5cc9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-abe3eca0-e35d-47dc-abb4-f477c6362eea\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-abe3eca0-e35d-47dc-abb4-f477c6362eea')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-abe3eca0-e35d-47dc-abb4-f477c6362eea button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 31,\n  \"fields\": [\n    {\n      \"column\": \"STATION\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"GHCND:USC00327027\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATION_NAME\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"PETERSBURG 2 N ND US\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ELEVATION\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8891521579485214e-13,\n        \"min\": 466.3,\n        \"max\": 466.3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          466.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LATITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1668641184613914e-14,\n        \"min\": 48.0355,\n        \"max\": 48.0355,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          48.0355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LONGITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.222880394871303e-14,\n        \"min\": -98.01,\n        \"max\": -98.01,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -98.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DATE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 20100101,\n        \"max\": 20100131,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          20100128\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TMAX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84,\n        \"min\": -244,\n        \"max\": 39,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          -56\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TMIN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 98,\n        \"min\": -328,\n        \"max\": -11,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          -244\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PRCP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2496,\n        \"min\": 0,\n        \"max\": 9999,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"8zkmyvkmdDgF","executionInfo":{"status":"ok","timestamp":1747723637187,"user_tz":-180,"elapsed":18,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"1c631fe6-d3cc-4cec-ecf3-4561e9b64543"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          ELEVATION      LATITUDE     LONGITUDE          DATE        TMAX  \\\n","count  3.100000e+01  3.100000e+01  3.100000e+01  3.100000e+01   31.000000   \n","mean   4.663000e+02  4.803550e+01 -9.801000e+01  2.010012e+07 -101.677419   \n","std    2.889152e-13  2.166864e-14  7.222880e-14  9.092121e+00   84.330061   \n","min    4.663000e+02  4.803550e+01 -9.801000e+01  2.010010e+07 -244.000000   \n","25%    4.663000e+02  4.803550e+01 -9.801000e+01  2.010011e+07 -167.000000   \n","50%    4.663000e+02  4.803550e+01 -9.801000e+01  2.010012e+07 -117.000000   \n","75%    4.663000e+02  4.803550e+01 -9.801000e+01  2.010012e+07  -30.500000   \n","max    4.663000e+02  4.803550e+01 -9.801000e+01  2.010013e+07   39.000000   \n","\n","             TMIN         PRCP  \n","count   31.000000    31.000000  \n","mean  -181.967742   646.387097  \n","std     98.271896  2496.721499  \n","min   -328.000000     0.000000  \n","25%   -275.000000     0.000000  \n","50%   -172.000000     0.000000  \n","75%    -91.500000     0.000000  \n","max    -11.000000  9999.000000  "],"text/html":["\n","  <div id=\"df-2ba8fca6-2bfb-4287-801b-34f8885d12c6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ELEVATION</th>\n","      <th>LATITUDE</th>\n","      <th>LONGITUDE</th>\n","      <th>DATE</th>\n","      <th>TMAX</th>\n","      <th>TMIN</th>\n","      <th>PRCP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>3.100000e+01</td>\n","      <td>3.100000e+01</td>\n","      <td>3.100000e+01</td>\n","      <td>3.100000e+01</td>\n","      <td>31.000000</td>\n","      <td>31.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>4.663000e+02</td>\n","      <td>4.803550e+01</td>\n","      <td>-9.801000e+01</td>\n","      <td>2.010012e+07</td>\n","      <td>-101.677419</td>\n","      <td>-181.967742</td>\n","      <td>646.387097</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.889152e-13</td>\n","      <td>2.166864e-14</td>\n","      <td>7.222880e-14</td>\n","      <td>9.092121e+00</td>\n","      <td>84.330061</td>\n","      <td>98.271896</td>\n","      <td>2496.721499</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>4.663000e+02</td>\n","      <td>4.803550e+01</td>\n","      <td>-9.801000e+01</td>\n","      <td>2.010010e+07</td>\n","      <td>-244.000000</td>\n","      <td>-328.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>4.663000e+02</td>\n","      <td>4.803550e+01</td>\n","      <td>-9.801000e+01</td>\n","      <td>2.010011e+07</td>\n","      <td>-167.000000</td>\n","      <td>-275.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>4.663000e+02</td>\n","      <td>4.803550e+01</td>\n","      <td>-9.801000e+01</td>\n","      <td>2.010012e+07</td>\n","      <td>-117.000000</td>\n","      <td>-172.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>4.663000e+02</td>\n","      <td>4.803550e+01</td>\n","      <td>-9.801000e+01</td>\n","      <td>2.010012e+07</td>\n","      <td>-30.500000</td>\n","      <td>-91.500000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>4.663000e+02</td>\n","      <td>4.803550e+01</td>\n","      <td>-9.801000e+01</td>\n","      <td>2.010013e+07</td>\n","      <td>39.000000</td>\n","      <td>-11.000000</td>\n","      <td>9999.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ba8fca6-2bfb-4287-801b-34f8885d12c6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2ba8fca6-2bfb-4287-801b-34f8885d12c6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2ba8fca6-2bfb-4287-801b-34f8885d12c6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-342a5661-3fb6-4fbd-9db6-e4ff184d93c5\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-342a5661-3fb6-4fbd-9db6-e4ff184d93c5')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-342a5661-3fb6-4fbd-9db6-e4ff184d93c5 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"ELEVATION\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 208.84425502546824,\n        \"min\": 2.8891521579485214e-13,\n        \"max\": 466.3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          466.29999999999984,\n          466.3,\n          31.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LATITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.189440863402982,\n        \"min\": 2.1668641184613914e-14,\n        \"max\": 48.0355,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          48.035499999999985,\n          48.0355,\n          31.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LONGITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.19409224716597,\n        \"min\": -98.01000000000006,\n        \"max\": 31.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -98.01000000000006,\n          -98.01,\n          31.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DATE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9304536.420763193,\n        \"min\": 9.092121131323903,\n        \"max\": 20100131.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          31.0,\n          20100116.0,\n          20100123.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TMAX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113.38361746476558,\n        \"min\": -244.0,\n        \"max\": 84.33006071256528,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -101.6774193548387,\n          -117.0,\n          31.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TMIN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 149.69437234330505,\n        \"min\": -328.0,\n        \"max\": 98.2718962440323,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -181.96774193548387,\n          -172.0,\n          31.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PRCP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3483.451649554335,\n        \"min\": 0.0,\n        \"max\": 9999.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          646.3870967741935,\n          9999.0,\n          2496.7214993189173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iGvWs0_pdIIz","executionInfo":{"status":"ok","timestamp":1747723637219,"user_tz":-180,"elapsed":28,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"7de085fc-1b1d-4321-fc4e-6d8e2d043917"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 31 entries, 0 to 30\n","Data columns (total 9 columns):\n"," #   Column        Non-Null Count  Dtype  \n","---  ------        --------------  -----  \n"," 0   STATION       31 non-null     object \n"," 1   STATION_NAME  31 non-null     object \n"," 2   ELEVATION     31 non-null     float64\n"," 3   LATITUDE      31 non-null     float64\n"," 4   LONGITUDE     31 non-null     float64\n"," 5   DATE          31 non-null     int64  \n"," 6   TMAX          31 non-null     int64  \n"," 7   TMIN          31 non-null     int64  \n"," 8   PRCP          31 non-null     int64  \n","dtypes: float64(3), int64(4), object(2)\n","memory usage: 2.3+ KB\n"]}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"bTRuVfQWevv9","executionInfo":{"status":"ok","timestamp":1747723637241,"user_tz":-180,"elapsed":42,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"e47b6c57-7801-4f55-ffee-ca53494f84da"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["STATION         0\n","STATION_NAME    0\n","ELEVATION       0\n","LATITUDE        0\n","LONGITUDE       0\n","DATE            0\n","TMAX            0\n","TMIN            0\n","PRCP            0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>STATION</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>STATION_NAME</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>ELEVATION</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>LATITUDE</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>LONGITUDE</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>DATE</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TMAX</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TMIN</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>PRCP</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df.drop_duplicates(inplace=True)"],"metadata":{"id":"hwSuS6SNfJe1","executionInfo":{"status":"ok","timestamp":1747723637245,"user_tz":-180,"elapsed":2,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["df.sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"YoNXSGNwjJ3D","executionInfo":{"status":"ok","timestamp":1747723637252,"user_tz":-180,"elapsed":4,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"aa2bea20-b3c7-4910-e02a-2bf2f2fc3f6e"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["STATION         GHCND:USC00327027GHCND:USC00327027GHCND:USC003...\n","STATION_NAME    PETERSBURG 2 N ND USPETERSBURG 2 N ND USPETERS...\n","ELEVATION                                                 14455.3\n","LATITUDE                                                1489.1005\n","LONGITUDE                                                -3038.31\n","DATE                                                    623103596\n","TMAX                                                        -3152\n","TMIN                                                        -5641\n","PRCP                                                        20038\n","dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>STATION</th>\n","      <td>GHCND:USC00327027GHCND:USC00327027GHCND:USC003...</td>\n","    </tr>\n","    <tr>\n","      <th>STATION_NAME</th>\n","      <td>PETERSBURG 2 N ND USPETERSBURG 2 N ND USPETERS...</td>\n","    </tr>\n","    <tr>\n","      <th>ELEVATION</th>\n","      <td>14455.3</td>\n","    </tr>\n","    <tr>\n","      <th>LATITUDE</th>\n","      <td>1489.1005</td>\n","    </tr>\n","    <tr>\n","      <th>LONGITUDE</th>\n","      <td>-3038.31</td>\n","    </tr>\n","    <tr>\n","      <th>DATE</th>\n","      <td>623103596</td>\n","    </tr>\n","    <tr>\n","      <th>TMAX</th>\n","      <td>-3152</td>\n","    </tr>\n","    <tr>\n","      <th>TMIN</th>\n","      <td>-5641</td>\n","    </tr>\n","    <tr>\n","      <th>PRCP</th>\n","      <td>20038</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["df.TMAX.hist()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":451},"id":"fzNaXdPOjL4x","executionInfo":{"status":"ok","timestamp":1747723637439,"user_tz":-180,"elapsed":185,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"db975ed0-05e2-4277-f2e9-4c2a632b87c4"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":13},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df.groupby(['DATE','TMAX'])['TMIN'].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"P1DPCQRNovEg","executionInfo":{"status":"ok","timestamp":1747723637482,"user_tz":-180,"elapsed":46,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"8f9025da-65c6-44a0-f1a1-1fd5ef2d3372"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DATE      TMAX\n","20100101  -178   -311.0\n","20100102  -244   -322.0\n","20100103  -194   -289.0\n","20100104  -167   -200.0\n","20100105  -133   -167.0\n","20100106  -133   -172.0\n","20100107  -150   -278.0\n","20100108  -233   -328.0\n","20100109  -233   -322.0\n","20100110  -117   -244.0\n","20100111  -67    -128.0\n","20100112  -78    -122.0\n","20100113  -17     -89.0\n","20100114   39     -72.0\n","20100115  -67     -72.0\n","20100116   22     -50.0\n","20100117   33     -44.0\n","20100118   6     -172.0\n","20100119  -56    -183.0\n","20100120  -67    -139.0\n","20100121  -67     -94.0\n","20100122  -44     -67.0\n","20100123  -6      -44.0\n","20100124   0      -11.0\n","20100125  -11    -161.0\n","20100126  -161   -233.0\n","20100127  -167   -222.0\n","20100128  -167   -283.0\n","20100129  -189   -283.0\n","20100130  -156   -267.0\n","20100131  -150   -272.0\n","Name: TMIN, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>TMIN</th>\n","    </tr>\n","    <tr>\n","      <th>DATE</th>\n","      <th>TMAX</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>20100101</th>\n","      <th>-178</th>\n","      <td>-311.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100102</th>\n","      <th>-244</th>\n","      <td>-322.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100103</th>\n","      <th>-194</th>\n","      <td>-289.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100104</th>\n","      <th>-167</th>\n","      <td>-200.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100105</th>\n","      <th>-133</th>\n","      <td>-167.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100106</th>\n","      <th>-133</th>\n","      <td>-172.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100107</th>\n","      <th>-150</th>\n","      <td>-278.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100108</th>\n","      <th>-233</th>\n","      <td>-328.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100109</th>\n","      <th>-233</th>\n","      <td>-322.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100110</th>\n","      <th>-117</th>\n","      <td>-244.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100111</th>\n","      <th>-67</th>\n","      <td>-128.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100112</th>\n","      <th>-78</th>\n","      <td>-122.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100113</th>\n","      <th>-17</th>\n","      <td>-89.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100114</th>\n","      <th>39</th>\n","      <td>-72.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100115</th>\n","      <th>-67</th>\n","      <td>-72.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100116</th>\n","      <th>22</th>\n","      <td>-50.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100117</th>\n","      <th>33</th>\n","      <td>-44.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100118</th>\n","      <th>6</th>\n","      <td>-172.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100119</th>\n","      <th>-56</th>\n","      <td>-183.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100120</th>\n","      <th>-67</th>\n","      <td>-139.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100121</th>\n","      <th>-67</th>\n","      <td>-94.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100122</th>\n","      <th>-44</th>\n","      <td>-67.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100123</th>\n","      <th>-6</th>\n","      <td>-44.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100124</th>\n","      <th>0</th>\n","      <td>-11.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100125</th>\n","      <th>-11</th>\n","      <td>-161.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100126</th>\n","      <th>-161</th>\n","      <td>-233.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100127</th>\n","      <th>-167</th>\n","      <td>-222.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100128</th>\n","      <th>-167</th>\n","      <td>-283.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100129</th>\n","      <th>-189</th>\n","      <td>-283.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100130</th>\n","      <th>-156</th>\n","      <td>-267.0</td>\n","    </tr>\n","    <tr>\n","      <th>20100131</th>\n","      <th>-150</th>\n","      <td>-272.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"J8FWQcjTryxO","executionInfo":{"status":"ok","timestamp":1747723637495,"user_tz":-180,"elapsed":9,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"db007c3c-2751-46ab-f2e5-c151d6304f70"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["STATION         0\n","STATION_NAME    0\n","ELEVATION       0\n","LATITUDE        0\n","LONGITUDE       0\n","DATE            0\n","TMAX            0\n","TMIN            0\n","PRCP            0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>STATION</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>STATION_NAME</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>ELEVATION</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>LATITUDE</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>LONGITUDE</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>DATE</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TMAX</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TMIN</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>PRCP</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["df.columns=df.columns.str.lower()"],"metadata":{"id":"Co9SP6Hotdjf","executionInfo":{"status":"ok","timestamp":1747723637519,"user_tz":-180,"elapsed":21,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["df.sample(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"rC8eMXFx1J-o","executionInfo":{"status":"ok","timestamp":1747723637575,"user_tz":-180,"elapsed":59,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"51b17200-d278-40c1-d81a-db9a2d7fa3e7"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              station          station_name  elevation  latitude  longitude  \\\n","11  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","14  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","1   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","9   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","10  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","20  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","18  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","25  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","27  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","3   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","\n","        date  tmax  tmin  prcp  \n","11  20100112   -78  -122     0  \n","14  20100115   -67   -72     0  \n","1   20100102  -244  -322     0  \n","9   20100110  -117  -244     0  \n","10  20100111   -67  -128     0  \n","20  20100121   -67   -94    25  \n","18  20100119   -56  -183     0  \n","25  20100126  -161  -233     0  \n","27  20100128  -167  -283     0  \n","3   20100104  -167  -200    15  "],"text/html":["\n","  <div id=\"df-b90d8528-d1c2-4738-92ff-e2d3d7775792\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>station</th>\n","      <th>station_name</th>\n","      <th>elevation</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>date</th>\n","      <th>tmax</th>\n","      <th>tmin</th>\n","      <th>prcp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>11</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100112</td>\n","      <td>-78</td>\n","      <td>-122</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100115</td>\n","      <td>-67</td>\n","      <td>-72</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100102</td>\n","      <td>-244</td>\n","      <td>-322</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100110</td>\n","      <td>-117</td>\n","      <td>-244</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100111</td>\n","      <td>-67</td>\n","      <td>-128</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100121</td>\n","      <td>-67</td>\n","      <td>-94</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100119</td>\n","      <td>-56</td>\n","      <td>-183</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100126</td>\n","      <td>-161</td>\n","      <td>-233</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100128</td>\n","      <td>-167</td>\n","      <td>-283</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100104</td>\n","      <td>-167</td>\n","      <td>-200</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b90d8528-d1c2-4738-92ff-e2d3d7775792')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b90d8528-d1c2-4738-92ff-e2d3d7775792 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b90d8528-d1c2-4738-92ff-e2d3d7775792');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-1c812ad5-e8cd-41c9-b3a0-743e911ef532\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1c812ad5-e8cd-41c9-b3a0-743e911ef532')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-1c812ad5-e8cd-41c9-b3a0-743e911ef532 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"station\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"GHCND:USC00327027\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"station_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"PETERSBURG 2 N ND US\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"elevation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.99182245303757e-14,\n        \"min\": 466.3,\n        \"max\": 466.3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          466.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.489778066296963e-15,\n        \"min\": 48.0355,\n        \"max\": 48.0355,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          48.0355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": -98.01,\n        \"max\": -98.01,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -98.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 20100102,\n        \"max\": 20100128,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          20100128\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tmax\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63,\n        \"min\": -244,\n        \"max\": -56,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -78\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 83,\n        \"min\": -322,\n        \"max\": -72,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          -283\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prcp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 0,\n        \"max\": 25,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["df.date.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"5qLJHpdS1eh7","executionInfo":{"status":"ok","timestamp":1747723637576,"user_tz":-180,"elapsed":33,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"b1cf6dfb-83be-48cb-d8c7-7701dea131b2"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["date\n","20100101    1\n","20100102    1\n","20100103    1\n","20100104    1\n","20100105    1\n","20100106    1\n","20100107    1\n","20100108    1\n","20100109    1\n","20100110    1\n","20100111    1\n","20100112    1\n","20100113    1\n","20100114    1\n","20100115    1\n","20100116    1\n","20100117    1\n","20100118    1\n","20100119    1\n","20100120    1\n","20100121    1\n","20100122    1\n","20100123    1\n","20100124    1\n","20100125    1\n","20100126    1\n","20100127    1\n","20100128    1\n","20100129    1\n","20100130    1\n","20100131    1\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>date</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>20100101</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100102</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100103</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100104</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100105</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100106</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100107</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100108</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100109</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100110</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100111</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100112</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100113</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100114</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100115</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100116</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100117</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100118</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100119</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100120</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100121</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100122</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100123</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100124</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100125</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100126</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100127</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100128</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100129</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100130</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20100131</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["df['hot_day'] = (df['tmax'] > 30).astype(int)\n","print(df['hot_day'].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3wivayDuo2gX","executionInfo":{"status":"ok","timestamp":1747723637576,"user_tz":-180,"elapsed":16,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"bddc3779-dcba-4b63-e706-f582e989be1c"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["hot_day\n","0    29\n","1     2\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["d=df['hot_day']\n","skewness=d.skew()\n","print(skewness)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N7-XH713AojN","executionInfo":{"status":"ok","timestamp":1747723637576,"user_tz":-180,"elapsed":10,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"20701bbc-85f6-48c2-e54d-9c39bca6bcf7"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["3.728148850808742\n"]}]},{"cell_type":"code","source":["from scipy.stats import gamma\n","params = gamma.fit(df['tmax'])\n","sns.histplot(df['tmax'], kde=False, stat='density', bins=30, color='lightgreen')\n","x = np.linspace(df['tmax'].min(), df['tmax'].max(), 100)\n","plt.plot(x, gamma.pdf(x, *params), 'b', label='Gamma fit')\n","plt.title('Gamma Distribution Fit')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":480},"id":"MJmim-LbpEVP","executionInfo":{"status":"ok","timestamp":1747725675022,"user_tz":-180,"elapsed":473,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"55cb030b-0f03-42f3-8c71-3ac11095368d"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.countplot(x='hot_day',data=df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":476},"id":"LjGXHuFK22Qz","executionInfo":{"status":"ok","timestamp":1747723637902,"user_tz":-180,"elapsed":25,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"03d1e1ae-a0a4-4350-c780-263b349eea65"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='hot_day', ylabel='count'>"]},"metadata":{},"execution_count":22},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.pointplot(x='hot_day', data=df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":475},"id":"c0ZXnxqsAlGb","executionInfo":{"status":"ok","timestamp":1747723908248,"user_tz":-180,"elapsed":73,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"9c647692-8f1c-434d-bcfd-439feb6c6a95"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='hot_day'>"]},"metadata":{},"execution_count":34},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"ijMyGj8G4HEX","executionInfo":{"status":"ok","timestamp":1747723638082,"user_tz":-180,"elapsed":42,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"f9ee25ce-9161-4aba-fd9c-7a75fb3e49ea"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              station          station_name  elevation  latitude  longitude  \\\n","0   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","1   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","2   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","3   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","4   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","5   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","6   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","7   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","8   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","9   GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","10  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","11  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","12  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","13  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","14  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","15  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","16  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","17  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","18  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","19  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","20  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","21  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","22  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","23  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","24  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","25  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","26  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","27  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","28  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","29  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","30  GHCND:USC00327027  PETERSBURG 2 N ND US      466.3   48.0355     -98.01   \n","\n","        date  tmax  tmin  prcp  hot_day  \n","0   20100101  -178  -311     0        0  \n","1   20100102  -244  -322     0        0  \n","2   20100103  -194  -289     0        0  \n","3   20100104  -167  -200    15        0  \n","4   20100105  -133  -167  9999        0  \n","5   20100106  -133  -172  9999        0  \n","6   20100107  -150  -278     0        0  \n","7   20100108  -233  -328     0        0  \n","8   20100109  -233  -322     0        0  \n","9   20100110  -117  -244     0        0  \n","10  20100111   -67  -128     0        0  \n","11  20100112   -78  -122     0        0  \n","12  20100113   -17   -89     0        0  \n","13  20100114    39   -72     0        1  \n","14  20100115   -67   -72     0        0  \n","15  20100116    22   -50     0        0  \n","16  20100117    33   -44     0        1  \n","17  20100118     6  -172     0        0  \n","18  20100119   -56  -183     0        0  \n","19  20100120   -67  -139     0        0  \n","20  20100121   -67   -94    25        0  \n","21  20100122   -44   -67     0        0  \n","22  20100123    -6   -44     0        0  \n","23  20100124     0   -11     0        0  \n","24  20100125   -11  -161     0        0  \n","25  20100126  -161  -233     0        0  \n","26  20100127  -167  -222     0        0  \n","27  20100128  -167  -283     0        0  \n","28  20100129  -189  -283     0        0  \n","29  20100130  -156  -267     0        0  \n","30  20100131  -150  -272     0        0  "],"text/html":["\n","  <div id=\"df-ba008717-cc19-4c34-b97d-e46daa261599\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>station</th>\n","      <th>station_name</th>\n","      <th>elevation</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>date</th>\n","      <th>tmax</th>\n","      <th>tmin</th>\n","      <th>prcp</th>\n","      <th>hot_day</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100101</td>\n","      <td>-178</td>\n","      <td>-311</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100102</td>\n","      <td>-244</td>\n","      <td>-322</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100103</td>\n","      <td>-194</td>\n","      <td>-289</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100104</td>\n","      <td>-167</td>\n","      <td>-200</td>\n","      <td>15</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100105</td>\n","      <td>-133</td>\n","      <td>-167</td>\n","      <td>9999</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100106</td>\n","      <td>-133</td>\n","      <td>-172</td>\n","      <td>9999</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100107</td>\n","      <td>-150</td>\n","      <td>-278</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100108</td>\n","      <td>-233</td>\n","      <td>-328</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100109</td>\n","      <td>-233</td>\n","      <td>-322</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100110</td>\n","      <td>-117</td>\n","      <td>-244</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100111</td>\n","      <td>-67</td>\n","      <td>-128</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100112</td>\n","      <td>-78</td>\n","      <td>-122</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100113</td>\n","      <td>-17</td>\n","      <td>-89</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100114</td>\n","      <td>39</td>\n","      <td>-72</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100115</td>\n","      <td>-67</td>\n","      <td>-72</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100116</td>\n","      <td>22</td>\n","      <td>-50</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100117</td>\n","      <td>33</td>\n","      <td>-44</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100118</td>\n","      <td>6</td>\n","      <td>-172</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100119</td>\n","      <td>-56</td>\n","      <td>-183</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100120</td>\n","      <td>-67</td>\n","      <td>-139</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100121</td>\n","      <td>-67</td>\n","      <td>-94</td>\n","      <td>25</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100122</td>\n","      <td>-44</td>\n","      <td>-67</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100123</td>\n","      <td>-6</td>\n","      <td>-44</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100124</td>\n","      <td>0</td>\n","      <td>-11</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100125</td>\n","      <td>-11</td>\n","      <td>-161</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100126</td>\n","      <td>-161</td>\n","      <td>-233</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100127</td>\n","      <td>-167</td>\n","      <td>-222</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100128</td>\n","      <td>-167</td>\n","      <td>-283</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100129</td>\n","      <td>-189</td>\n","      <td>-283</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100130</td>\n","      <td>-156</td>\n","      <td>-267</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>GHCND:USC00327027</td>\n","      <td>PETERSBURG 2 N ND US</td>\n","      <td>466.3</td>\n","      <td>48.0355</td>\n","      <td>-98.01</td>\n","      <td>20100131</td>\n","      <td>-150</td>\n","      <td>-272</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba008717-cc19-4c34-b97d-e46daa261599')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ba008717-cc19-4c34-b97d-e46daa261599 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ba008717-cc19-4c34-b97d-e46daa261599');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-895fafc5-da9f-4734-a1c0-08896c72fb49\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-895fafc5-da9f-4734-a1c0-08896c72fb49')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-895fafc5-da9f-4734-a1c0-08896c72fb49 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_090f3fd6-18ca-48c9-a9e4-597ba19fc360\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_090f3fd6-18ca-48c9-a9e4-597ba19fc360 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 31,\n  \"fields\": [\n    {\n      \"column\": \"station\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"GHCND:USC00327027\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"station_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"PETERSBURG 2 N ND US\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"elevation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8891521579485214e-13,\n        \"min\": 466.3,\n        \"max\": 466.3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          466.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1668641184613914e-14,\n        \"min\": 48.0355,\n        \"max\": 48.0355,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          48.0355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.222880394871303e-14,\n        \"min\": -98.01,\n        \"max\": -98.01,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -98.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 20100101,\n        \"max\": 20100131,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          20100128\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tmax\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84,\n        \"min\": -244,\n        \"max\": 39,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          -56\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 98,\n        \"min\": -328,\n        \"max\": -11,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          -244\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prcp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2496,\n        \"min\": 0,\n        \"max\": 9999,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hot_day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["subset = df[['tmax', 'hot_day']]\n","corr = subset.corr()\n","sns.heatmap(subset.corr(), annot=True, cmap='coolwarm')\n","plt.title(\"Heatmap of Two Variables\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"bfsLPu0qs-sA","executionInfo":{"status":"ok","timestamp":1747723638245,"user_tz":-180,"elapsed":162,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"87b7d2c8-11bf-43ae-a275-16d113899d49"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data = df['tmax'].dropna()\n","mu, std = stats.norm.fit(data)\n","print(f\"Estimated Mean (mu): {mu:.2f}\")\n","print(f\"Estimated Standard Deviation (std): {std:.2f}\")\n","plt.figure(figsize=(8,5))\n","sns.histplot(data, bins=30, kde=False, stat='density', color='skyblue')\n","xmin, xmax = plt.xlim()\n","x = np.linspace(xmin, xmax, 100)\n","p = stats.norm.pdf(x, mu, std)\n","plt.plot(x, p, 'r', linewidth=2)\n","plt.title('Fit results: mu = %.2f,  std = %.2f' % (mu, std))\n","plt.xlabel('TMAX')\n","plt.ylabel('Density')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":531},"id":"61aIgDu2PWAb","executionInfo":{"status":"ok","timestamp":1747724236538,"user_tz":-180,"elapsed":397,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"756485f8-66bc-4818-f28c-ffcfdb6b0071"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["Estimated Mean (mu): -101.68\n","Estimated Standard Deviation (std): 82.96\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["threshold = 30\n","prob = 1 - stats.norm.cdf(threshold, mu, std)\n","print(f\"Probability that TMAX > {threshold}: {prob}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oa8c37MRR-NZ","executionInfo":{"status":"ok","timestamp":1747724240265,"user_tz":-180,"elapsed":10,"user":{"displayName":"Omar Ammar","userId":"15092691913357285246"}},"outputId":"c1c2149d-bc1c-43f7-b17c-dae8bbbabea1"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Probability that TMAX > 30: 0.05622645455156394\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"1Klv2pDYKPNL_IubkGABg1Xy0eei6cy3v","timestamp":1747720935903},{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1745954280368}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}